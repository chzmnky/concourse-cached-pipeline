#!/bin/bash
set -e

# expects BUILD_CACHE_CMD command to output files at ../cache

AUTH_FLAGS=--basic --user admin:password

echo "## 0) Build Info"
GIT_REF="$1"
BUILD_CACHE_CMD="$2"

echo "GIT_REF=$GIT_REF"
echo "BUILD_CACHE_CMD=$BUILD_CACHE_CMD"

if [ -z "$BASE_URL" ]; then echo "Error: BASE_URL is unset"; exit 1; fi;
if [ -z "$CACHE_PATH" ]; then echo "Error: CACHE_PATH is unset"; exit 1; fi;

echo "Using cache path: $CACHE_PATH" 1>&2

echo "## 1) Checking cache"
CACHE_FILE=$GIT_REF.tar.gz
CACHE_FILEPATH=$CACHE_PATH/$CACHE_FILE
CACHE_URL=$BASE_URL/$CACHE_FILEPATH

if curl $AUTH_FLAGS --silent --head --fail "$CACHE_URL"; then
  echo "Build cache exists: $CACHE_FILEPATH"

  echo "## 2) Downloading and extracting cache"
  cd ../cache
  curl $AUTH_FLAGS "$CACHE_URL" --output "/tmp/$CACHE_FILE"
  tar -xzf /tmp/$CACHE_FILE

else
  echo "Build cache does not exist: $CACHE_FILEPATH"
  
  echo "## 2) Building cache"
  eval $BUILD_CACHE_CMD
  
  echo "## 3) Uploading cache"
  cd ../cache
  tar -czf /tmp/$CACHE_FILE ./
  curl $AUTH_FLAGS "$CACHE_URL" --upload-file /tmp/$CACHE_FILE

  # check whether file was created successfully, e.g. the previous request failed with a 401
  echo "## 4) Check cache successfully uploaded"
  curl $AUTH_FLAGS --silent --head --fail "$CACHE_URL"
fi

# we expect to be in the ../cache dir by now
echo Downloaded $(du -hs ./ | cut -f1) in $(find ./ -type f | wc -l) files. >&2
